[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	__alloca
	EXTERN	_api_cmdline
	EXTERN	_api_fopen
	EXTERN	_api_fsize
	EXTERN	_api_fread
	EXTERN	_api_fclose
	EXTERN	_info_BMP
	EXTERN	_info_JPEG
	EXTERN	_api_putstr0
	EXTERN	_api_end
	EXTERN	_api_openwin
	EXTERN	_decode0_JPEG
	EXTERN	_api_refreshwin
	EXTERN	_api_getkey
	EXTERN	_decode0_BMP
[FILE "gview.c"]
[SECTION .data]
LC0:
	DB	"file not found.",0x0A,0x00
LC1:
	DB	"file too large.",0x0A,0x00
LC2:
	DB	"file type unknown.",0x0A,0x00
LC3:
	DB	"picture too large.",0x0A,0x00
LC4:
	DB	"gview",0x00
LC5:
	DB	"decode error.",0x0A,0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EAX,4572840
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-1427068+EBP]
	MOV	EDI,EBX
	CALL	__alloca
	PUSH	30
	PUSH	EBX
	CALL	_api_cmdline
	POP	ESI
	POP	EAX
	CMP	BYTE [-1427068+EBP],32
	JLE	L38
L6:
	INC	EDI
	CMP	BYTE [EDI],32
	JG	L6
L38:
	CMP	BYTE [EDI],32
	JE	L11
L40:
	PUSH	EDI
	CALL	_api_fopen
	POP	EBX
	MOV	ESI,EAX
	TEST	EAX,EAX
	JNE	L12
	PUSH	LC0
	CALL	_error
	POP	ECX
L12:
	PUSH	0
	PUSH	ESI
	CALL	_api_fsize
	MOV	EDI,EAX
	POP	EAX
	POP	EDX
	CMP	EDI,524288
	JLE	L13
	PUSH	LC1
	CALL	_error
	POP	EAX
L13:
	PUSH	ESI
	LEA	EBX,DWORD [-589836+EBP]
	PUSH	EDI
	PUSH	EBX
	CALL	_api_fread
	PUSH	ESI
	LEA	ESI,DWORD [-65548+EBP]
	CALL	_api_fclose
	PUSH	EBX
	LEA	EAX,DWORD [-1427100+EBP]
	PUSH	EDI
	PUSH	EAX
	PUSH	ESI
	CALL	_info_BMP
	ADD	ESP,32
	TEST	EAX,EAX
	JNE	L14
	PUSH	EBX
	LEA	EDX,DWORD [-1427100+EBP]
	PUSH	EDI
	PUSH	EDX
	PUSH	ESI
	CALL	_info_JPEG
	ADD	ESP,16
	TEST	EAX,EAX
	JNE	L14
	PUSH	LC2
	CALL	_api_putstr0
	CALL	_api_end
	POP	EBX
L14:
	CMP	DWORD [-1427092+EBP],1024
	JG	L17
	CMP	DWORD [-1427088+EBP],768
	JLE	L16
L17:
	PUSH	LC3
	CALL	_error
	POP	ECX
L16:
	MOV	EAX,DWORD [-1427092+EBP]
	ADD	EAX,16
	MOV	DWORD [-4572836+EBP],EAX
	CMP	EAX,135
	JG	L18
	MOV	DWORD [-4572836+EBP],136
L18:
	PUSH	LC4
	MOV	EAX,DWORD [-1427088+EBP]
	PUSH	-1
	ADD	EAX,37
	PUSH	EAX
	LEA	EAX,DWORD [-1427036+EBP]
	PUSH	DWORD [-4572836+EBP]
	PUSH	EAX
	CALL	_api_openwin
	ADD	ESP,20
	CMP	DWORD [-1427100+EBP],1
	MOV	DWORD [-4572832+EBP],EAX
	JE	L46
	PUSH	0
	LEA	EAX,DWORD [-4572828+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-589836+EBP]
	PUSH	4
	PUSH	EAX
	LEA	EAX,DWORD [-65548+EBP]
	PUSH	EDI
	PUSH	EAX
	CALL	_decode0_JPEG
L45:
	ADD	ESP,24
	TEST	EAX,EAX
	JE	L21
	PUSH	LC5
	CALL	_error
	POP	EDX
L21:
	XOR	ESI,ESI
	CMP	ESI,DWORD [-1427088+EBP]
	JGE	L42
	IMUL	EDX,DWORD [-4572836+EBP],29
	MOV	DWORD [-4572852+EBP],EDX
L31:
	MOV	ECX,DWORD [-1427092+EBP]
	MOV	EDI,DWORD [-4572852+EBP]
	MOV	EAX,DWORD [-4572836+EBP]
	SUB	EAX,ECX
	LEA	EBX,DWORD [-1427036+EDI+EBP*1]
	CDQ
	MOV	EDI,2
	IDIV	EDI
	LEA	EDI,DWORD [EAX+EBX*1]
	XOR	EBX,EBX
	MOV	EAX,ESI
	IMUL	EAX,ECX
	CMP	EBX,ECX
	LEA	EAX,DWORD [-4572828+EBP+EAX*4]
	MOV	DWORD [-4572840+EBP],EAX
	JGE	L44
L30:
	PUSH	ESI
	MOV	EDX,DWORD [-4572840+EBP]
	PUSH	EBX
	MOVZX	EAX,BYTE [EDX+EBX*4]
	PUSH	EAX
	MOVZX	EAX,BYTE [1+EDX+EBX*4]
	PUSH	EAX
	MOVZX	EAX,BYTE [2+EDX+EBX*4]
	PUSH	EAX
	CALL	_rgb2pal
	ADD	ESP,20
	MOV	BYTE [EBX+EDI*1],AL
	INC	EBX
	CMP	EBX,DWORD [-1427092+EBP]
	JL	L30
L44:
	MOV	EDI,DWORD [-4572836+EBP]
	INC	ESI
	ADD	DWORD [-4572852+EBP],EDI
	CMP	ESI,DWORD [-1427088+EBP]
	JL	L31
L42:
	MOV	EAX,DWORD [-1427088+EBP]
	MOV	ECX,2
	ADD	EAX,29
	PUSH	EAX
	MOV	EAX,DWORD [-1427092+EBP]
	SUB	DWORD [-4572836+EBP],EAX
	MOV	EAX,DWORD [-4572836+EBP]
	CDQ
	IDIV	ECX
	MOV	EDX,DWORD [-1427092+EBP]
	ADD	EDX,EAX
	PUSH	EDX
	PUSH	29
	PUSH	EAX
	PUSH	DWORD [-4572832+EBP]
	CALL	_api_refreshwin
	ADD	ESP,20
L32:
	PUSH	1
	CALL	_api_getkey
	MOV	ESI,EAX
	POP	EAX
	CMP	ESI,81
	JE	L36
	CMP	ESI,113
	JNE	L32
L36:
	CALL	_api_end
	JMP	L32
L46:
	PUSH	0
	LEA	EAX,DWORD [-4572828+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-589836+EBP]
	PUSH	4
	PUSH	EAX
	LEA	EAX,DWORD [-65548+EBP]
	PUSH	EDI
	PUSH	EAX
	CALL	_decode0_BMP
	JMP	L45
L11:
	INC	EDI
	CMP	BYTE [EDI],32
	JE	L11
	JMP	L40
[SECTION .data]
	ALIGNB	4
_table.0:
	DD	3
	DD	1
	DD	0
	DD	2
[SECTION .text]
	GLOBAL	_rgb2pal
_rgb2pal:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,256
	PUSH	EBX
	MOV	ESI,256
	SUB	ESP,20
	IMUL	ECX,DWORD [8+EBP],21
	MOV	EDX,DWORD [20+EBP]
	MOV	EAX,DWORD [24+EBP]
	AND	EDX,1
	AND	EAX,1
	LEA	EAX,DWORD [EDX+EAX*2]
	MOV	EBX,DWORD [_table.0+EAX*4]
	MOV	EAX,ECX
	CDQ
	IDIV	ESI
	IMUL	ESI,DWORD [12+EBP],21
	MOV	ECX,EAX
	MOV	EAX,ESI
	CDQ
	IDIV	EDI
	IMUL	ESI,DWORD [16+EBP],21
	MOV	DWORD [-32+EBP],EAX
	ADD	ECX,EBX
	MOV	EAX,ESI
	CDQ
	IDIV	EDI
	MOV	ESI,EAX
	MOV	EDI,4
	MOV	EAX,ECX
	CDQ
	IDIV	EDI
	MOV	ECX,EAX
	MOV	EAX,DWORD [-32+EBP]
	ADD	EAX,EBX
	LEA	EBX,DWORD [EBX+ESI*1]
	CDQ
	IDIV	EDI
	MOV	DWORD [-32+EBP],EAX
	MOV	EAX,EBX
	CDQ
	IDIV	EDI
	MOV	EBX,EAX
	IMUL	EAX,DWORD [-32+EBP],6
	IMUL	EDX,EBX,36
	ADD	ESP,20
	LEA	EAX,DWORD [EAX+ECX*1]
	POP	EBX
	POP	ESI
	LEA	EAX,DWORD [16+EDX+EAX*1]
	POP	EDI
	MOVZX	EAX,AL
	POP	EBP
	RET
	GLOBAL	_error
_error:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	DWORD [8+EBP]
	CALL	_api_putstr0
	POP	EAX
	LEAVE
	JMP	_api_end
